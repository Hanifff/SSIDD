// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: ssidd.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SsiddClient is the client API for Ssidd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsiddClient interface {
	// Data and Policy level (Policy can be splitted from data FTF).
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// organisation level
	AddOrganisation(ctx context.Context, in *OrgAddRequest, opts ...grpc.CallOption) (*OrgAddResponse, error)
	RemoveOrganisation(ctx context.Context, in *OrgRemoveRequest, opts ...grpc.CallOption) (*OrgRemoveResponse, error)
}

type ssiddClient struct {
	cc grpc.ClientConnInterface
}

func NewSsiddClient(cc grpc.ClientConnInterface) SsiddClient {
	return &ssiddClient{cc}
}

func (c *ssiddClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssiddClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssiddClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssiddClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssiddClient) AddOrganisation(ctx context.Context, in *OrgAddRequest, opts ...grpc.CallOption) (*OrgAddResponse, error) {
	out := new(OrgAddResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/AddOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ssiddClient) RemoveOrganisation(ctx context.Context, in *OrgRemoveRequest, opts ...grpc.CallOption) (*OrgRemoveResponse, error) {
	out := new(OrgRemoveResponse)
	err := c.cc.Invoke(ctx, "/ssidd.Ssidd/RemoveOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsiddServer is the server API for Ssidd service.
// All implementations must embed UnimplementedSsiddServer
// for forward compatibility
type SsiddServer interface {
	// Data and Policy level (Policy can be splitted from data FTF).
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// organisation level
	AddOrganisation(context.Context, *OrgAddRequest) (*OrgAddResponse, error)
	RemoveOrganisation(context.Context, *OrgRemoveRequest) (*OrgRemoveResponse, error)
	mustEmbedUnimplementedSsiddServer()
}

// UnimplementedSsiddServer must be embedded to have forward compatible implementations.
type UnimplementedSsiddServer struct {
}

func (UnimplementedSsiddServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSsiddServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedSsiddServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSsiddServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSsiddServer) AddOrganisation(context.Context, *OrgAddRequest) (*OrgAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrganisation not implemented")
}
func (UnimplementedSsiddServer) RemoveOrganisation(context.Context, *OrgRemoveRequest) (*OrgRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrganisation not implemented")
}
func (UnimplementedSsiddServer) mustEmbedUnimplementedSsiddServer() {}

// UnsafeSsiddServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsiddServer will
// result in compilation errors.
type UnsafeSsiddServer interface {
	mustEmbedUnimplementedSsiddServer()
}

func RegisterSsiddServer(s grpc.ServiceRegistrar, srv SsiddServer) {
	s.RegisterService(&Ssidd_ServiceDesc, srv)
}

func _Ssidd_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ssidd_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ssidd_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ssidd_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ssidd_AddOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).AddOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/AddOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).AddOrganisation(ctx, req.(*OrgAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ssidd_RemoveOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsiddServer).RemoveOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssidd.Ssidd/RemoveOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsiddServer).RemoveOrganisation(ctx, req.(*OrgRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ssidd_ServiceDesc is the grpc.ServiceDesc for Ssidd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ssidd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ssidd.Ssidd",
	HandlerType: (*SsiddServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Ssidd_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Ssidd_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Ssidd_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Ssidd_Update_Handler,
		},
		{
			MethodName: "AddOrganisation",
			Handler:    _Ssidd_AddOrganisation_Handler,
		},
		{
			MethodName: "RemoveOrganisation",
			Handler:    _Ssidd_RemoveOrganisation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssidd.proto",
}
